<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Windows脚本＋ImageMagic-&gt;实现条漫自动化裁图</title>
    <link href="/2021/08/12/imagemagic+batch%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E8%A3%81%E5%9B%BE/"/>
    <url>/2021/08/12/imagemagic+batch%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E8%A3%81%E5%9B%BE/</url>
    
    <content type="html"><![CDATA[<p>上个礼拜，公司运营部的小伙伴在裁剪条漫时遇到了难题：由于不同作者发过来的条漫规格不尽相同，运营部的小伙伴需要对源图缩放至统一大小，然后按照相同规格裁剪图片，以确保上线图片保持一致。</p><p>运营小伙伴熟悉photoshop，最自然的做法是三步走策略：<br>1、拼接条漫图片；<br>2、缩放拼接图片到指定宽度，例如1000px；<br>3、按照指定高度裁剪图片，例如960px；<br>最终得到一大推尺寸为1000*960px的图片。</p><p>思路没错，一切看上去都那么美，but！实践结果却很耗时：裁剪一个章节的漫画作品，大概需要一个小时！！抛开一个小时的结果不说，这个裁图过程是单调重复，毫无技术含量的。</p><p>下面说一下技术部的我是怎样“解放生产力”的。<br>imagemagic对图片的处理很不错，更重要的是，它可以使用命令行的方式，这也为它赢得了“命令行上的photoshop”这样的美誉。windows脚本是命令行的合集，可以方便地执行一系列命令语句。所以，思路很简单：用windows脚本＋imagemagic实现条漫自动化裁图。</p><p>依然是如上的三步走策略，只是每一步都对应了一行命令语句：<br>1、拼接条漫图片；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ convert %srcDir% -append -gravity west %resultPic%<br></code></pre></td></tr></table></figure><p>2、缩放拼接图片到指定宽度，例如1000px；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ convert -resize 1000 %resultPic% %resultPic_1000%<br></code></pre></td></tr></table></figure><p>3、按照指定高度裁剪图片，例如960px；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ convert %resultPic_1000% -crop 1000x960 %cropPic%<br></code></pre></td></tr></table></figure><p>实测结果，针对20几页的一话条漫，从执行到生成结果不到10秒！！<br>生命本就该浪费在美好的事物上，而不是简单的重复劳作。</p><p>OK，接下来记录一下编写windows脚本遇到的“坑”。<br>1、for循环内的字符串拼接<br>字符串拼接，网上搜到的资料大都是两个字符串的拼接，如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">set</span> var1=解放生产力<br><span class="hljs-built_in">set</span> var2=发展生产力<br><span class="hljs-built_in">set</span> var＝％var1%！！%var2%<br><span class="hljs-built_in">echo</span> %var%<br></code></pre></td></tr></table></figure><p>输出结果：解放生产力！！发展生产力</p><p>但是这种方法中for循环内部就不好用了，for example：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">for</span> /r %%i <span class="hljs-keyword">in</span> (*.jpg) <span class="hljs-keyword">do</span> (<br><span class="hljs-built_in">set</span> srcdir=%srcdir%%%i<br>)<br><span class="hljs-built_in">echo</span> %srcdir%<br></code></pre></td></tr></table></figure><p>输出结果：当前文件夹中最后一个jpg文件的绝对路径</p><p>这显然不是我要的结果。</p><p>最终的解决方案是：使用“delayed variable expansion”。用SETLOCAL ENABLEDELAYEDEXPANSION和ENDLOCAL把for循环包起来，然后用！替代％。如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">SETLOCAL ENABLEDELAYEDEXPANSION<br><span class="hljs-keyword">for</span> /r %%i <span class="hljs-keyword">in</span> (*.jpg) <span class="hljs-keyword">do</span> (<br><span class="hljs-built_in">set</span> srcdir=！srcdir！ %%i<br>)<br>ENDLOCAL<br><span class="hljs-built_in">echo</span> %srcdir%<br></code></pre></td></tr></table></figure><p>输出结果：当前文件夹所有jpg文件绝对路径字符串的拼接（带空格）</p><p>注意：变量需在SETLOCAL ENABLEDELAYEDEXPANSION和ENDLOCAL内部才生效！</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>2016版Macbook安装win10官方显卡驱动兼容性问题</title>
    <link href="/2021/08/12/Macbook%E5%AE%89%E8%A3%85win10%E5%AE%98%E6%96%B9%E6%98%BE%E5%8D%A1%E9%A9%B1%E5%8A%A8%E5%85%BC%E5%AE%B9%E6%80%A7%E9%97%AE%E9%A2%98/"/>
    <url>/2021/08/12/Macbook%E5%AE%89%E8%A3%85win10%E5%AE%98%E6%96%B9%E6%98%BE%E5%8D%A1%E9%A9%B1%E5%8A%A8%E5%85%BC%E5%AE%B9%E6%80%A7%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>必须肯定的是，苹果官方提供的双系统安装文档已足够详细（<a href="https://support.apple.com/zh-cn/HT204990%EF%BC%89">https://support.apple.com/zh-cn/HT204990）</a> ；</p><p>必须吐槽的是，2016版及以后的Macbook只能安装Win10，无法安装Win7；</p><p>“启动转换”升级之后，新版Macbook安装Win10简化为两步：</p><p>1、Mac系统下，使用“启动转换”加载Win10镜像文件，分区，下一步；</p><p>2、Win10系统下，使用“bootcamp”安装驱动；</p><p>OVER！</p><p>备注：Win10镜像文件建议官方下载（<a href="https://msdn.itellyou.cn)/">https://msdn.itellyou.cn）</a> ， 后续激活（暴风Win10激活工具）；</p><p>那么，问题来了：</p><p>步骤2中<strong>使用官方工具“bootcamp”下载的Intel显卡驱动，兼容性存有问题；</strong></p><p>具体表现：屏幕关闭或睡眠以后，无法唤醒，一直黑屏;</p><p>网上的说法是：Mac系统和Windows系统的显卡驱动存在兼容性问题：<br><a href="https://www.windows10.pro/macbook-installing-win10-unable-to-sleep/">https://www.windows10.pro/macbook-installing-win10-unable-to-sleep/</a> ；</p><p>但是，按照上述教程，安装驱动后，在断网情况下依然会出现无法唤醒的问题；</p><p>由此判断，官方提供的驱动已是更新后的；</p><p>所以，尝试下述做法：</p><p>1、从“控制面板”卸载Intel显卡驱动；</p><p>2、使用“驱动精灵”重新安装显卡驱动；</p><p>OVER!</p><p>问题解决;</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>漫画APP竞品技术栈统计</title>
    <link href="/2021/08/12/%E6%BC%AB%E7%94%BBApp%E7%AB%9E%E5%93%81%E6%8A%80%E6%9C%AF%E6%A0%88%E7%BB%9F%E8%AE%A1/"/>
    <url>/2021/08/12/%E6%BC%AB%E7%94%BBApp%E7%AB%9E%E5%93%81%E6%8A%80%E6%9C%AF%E6%A0%88%E7%BB%9F%E8%AE%A1/</url>
    
    <content type="html"><![CDATA[<table><thead><tr><th align="left">漫画APP</th><th align="left">网络库</th><th align="left">图片加载库</th><th align="left">数据库框架</th><th align="left">依赖注入框架</th><th align="left">加壳加固</th><th align="left">apk包大小</th></tr></thead><tbody><tr><td align="left">腾讯动漫</td><td align="left">Volley+Okhttp</td><td align="left">Glide</td><td align="left"></td><td align="left"></td><td align="left">无</td><td align="left">14.7MB</td></tr><tr><td align="left">快看漫画</td><td align="left">Retrofit</td><td align="left">Picaso+Fresco</td><td align="left"></td><td align="left"></td><td align="left">无</td><td align="left">18MB</td></tr><tr><td align="left">可米酷漫画</td><td align="left">Volley</td><td align="left">Fresco</td><td align="left"></td><td align="left"></td><td align="left">无</td><td align="left">17.1MB</td></tr><tr><td align="left">布卡漫画</td><td align="left">Okhttp</td><td align="left">Fresco</td><td align="left"></td><td align="left"></td><td align="left">无</td><td align="left">10MB</td></tr><tr><td align="left">网易漫画</td><td align="left">Okhttp</td><td align="left">Glide</td><td align="left"></td><td align="left"></td><td align="left">无</td><td align="left">11.3MB</td></tr><tr><td align="left">暴走漫画</td><td align="left">Android-async-http+Okhttp</td><td align="left">UIL</td><td align="left"></td><td align="left"></td><td align="left">无</td><td align="left">18.8MB</td></tr><tr><td align="left">有妖气漫画</td><td align="left">Volley+Okhttp</td><td align="left">Fresco</td><td align="left"></td><td align="left"></td><td align="left">无</td><td align="left">12.8MB</td></tr><tr><td align="left">爱动漫</td><td align="left">Android-async-http</td><td align="left">UIL+Glide</td><td align="left"></td><td align="left"></td><td align="left">无</td><td align="left">14.6MB</td></tr><tr><td align="left">咪咕动漫</td><td align="left">Retrofit2.0</td><td align="left">Glide+UIL</td><td align="left">GreenDao</td><td align="left">RxJava，butterknife</td><td align="left">apkwrapper</td><td align="left">22.2MB</td></tr><tr><td align="left">漫画岛</td><td align="left">Retrofit</td><td align="left">UIL</td><td align="left">Sqlite</td><td align="left"></td><td align="left">奇虎加壳</td><td align="left">24MB</td></tr><tr><td align="left">动漫之家</td><td align="left">XUtils-HttpUtils</td><td align="left">UIL</td><td align="left"></td><td align="left"></td><td align="left">无</td><td align="left">3.1MB</td></tr><tr><td align="left">漫画控</td><td align="left">Volley</td><td align="left">Fresco</td><td align="left">Sqlite</td><td align="left">butterknife</td><td align="left">无</td><td align="left">14.4MB</td></tr><tr><td align="left">新漫画</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left">无</td><td align="left">7MB</td></tr></tbody></table>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>奥巴马演讲-我们为什么要上学</title>
    <link href="/2018/12/12/%E5%A5%A5%E5%B7%B4%E9%A9%AC-%E6%88%91%E4%BB%AC%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E4%B8%8A%E5%AD%A6/"/>
    <url>/2018/12/12/%E5%A5%A5%E5%B7%B4%E9%A9%AC-%E6%88%91%E4%BB%AC%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E4%B8%8A%E5%AD%A6/</url>
    
    <content type="html"><![CDATA[<p>此视频是奥巴马于2009年9月8日中午在弗吉尼亚州阿灵顿县韦克菲尔德高中发表的开学演讲。由于受众是中学生，演讲中只使用了简单词汇。但却把“我们为什么要上学”这个主题讲的清楚且有说服力。相较于令人反感的“大词说教”，奥巴马用事例让学生更能感同身受。视频里金句频出，常看常新，也同时弥补了我们教育中缺失的部分。</p><iframe width="640" height="345" src="https://www.youtube.com/embed/8ZZ6GrzWkw0" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe><p>重点摘录如下：</p><p><em><strong>I’ve talked about teachers’ responsibility for inspiring students and pushing you to learn.</strong></em></p><blockquote><p>我谈到过教师们有责任激励和启迪你们，督促你们学习。</p></blockquote><p><em><strong>I’ve talked about your parents’ responsibility for making sure you stay on track, and you get your homework done, and don’t spend every waking hour in front of the TV or with the Xbox.</strong></em></p><blockquote><p>我谈到过家长们有责任看管你们认真学习、完成作业，不要成天只会看电视或打游戏机。</p></blockquote><p><em><strong>I’ve talked a lot about your government’s responsibility for setting high standards, and supporting teachers and principals, and turning around schools that aren’t working, where students aren’t getting the opportunities that they deserve.</strong></em></p><blockquote><p>我也很多次谈到过政府有责任设定高标准严要求、协助老师和校长们的工作，改变在有些学校里学生得不到应有的学习机会的现状。</p></blockquote><p><em><strong>But at the end of the day, we can have the most dedicated teachers, the most supportive parents, the best schools in the world – and none of it will make a difference, none of it will matter unless all of you fulfill your responsibilities, unless you show up to those schools, unless you pay attention to those teachers, unless you listen to your parents and grandparents and other adults and put in the hard work it takes to succeed.</strong></em></p><blockquote><p>但哪怕这一切都达到最好，哪怕我们有最尽职的教师、最好的家长、和最优秀的学校，假如你们不去履行自己的责任的话，那么这一切努力都会白费。除非你每天准时去上学、除非你认真地听老师讲课、除非你把父母、长辈和其他大人们说的话放在心上、除非你肯付出成功所必需的努力，否则这一切都会失去意义。</p></blockquote><p><em><strong>That’s what I want to focus on today: the responsibility each of you has for your education.</strong></em></p><blockquote><p>而这就是我今天讲话的主题：对于自己的教育，你们中的每一个人的责任。</p></blockquote><p><em><strong><font color=yellow>Every single one of you has something that you’re good at. Every single one of you has something to offer. And you have a responsibility to yourself to discover what that is. That’s the opportunity an education can provide.</font></strong></em></p><blockquote><p>你们中的每一个人都会有自己擅长的东西，每一个人都是有用之材，而发现自己的才能是什么，就是你们要对自己担起的责任。教育给你们提供了发现自己才能的机会。</p></blockquote><p><em><strong>And no matter what you want to do with your life, I guarantee that you’ll need an education to do it.</strong></em></p><blockquote><p>而且，我可以向你保证，不管你将来想要做什么，你都需要相应的教育。</p></blockquote><p><em><strong>You’re going to need a good education for every single one of those careers. You cannot drop out of school and just drop into a good job. You’ve got to train for it and work for it and learn for it.</strong></em></p><blockquote><p>无论你选择哪一种职业，良好的教育都必不可少，这世上不存在不把书念完就能拿到好工作的美梦，任何工作，都需要你的汗水、训练与学习。</p></blockquote><p><em><strong>And this isn’t just important for your own life and your own future. What you make of your education will decide nothing less than the future of this country.</strong></em></p><blockquote><p>不仅仅对于你们个人的未来有重要意义，你们的教育如何也会对这个国家、乃至世界的未来产生重要影响。</p></blockquote><p><em><strong>The future of America depends on you. What you’re learning in school today will determine whether we as a nation can meet our greatest challenges in the future.</strong></em></p><blockquote><p>国家的未来就掌握在你们手中。今天你们在学校中学习的内容，将会决定我们整个国家在未来迎接重大挑战时的表现。</p></blockquote><p><em><strong>You’ll need the knowledge and problem-solving skills you learn in science and math to cure diseases like cancer and AIDS, and to develop new energy technologies and protect our environment.</strong></em></p><blockquote><p>你们需要在数理科学课程上学习的知识和技能，去治疗癌症、艾滋那样的疾病，和解决我们面临的能源问题与环境问题。</p></blockquote><p><em><strong>You’ll need the insights and critical-thinking skills you gain in history and social studies to fight poverty and homelessness, crime and discrimination, and make our nation more fair and more free.</strong></em></p><blockquote><p>你们需要在历史社科课程上培养出的观察力与判断力，来减轻和消除无家可归与贫困、犯罪问题和各种歧视，让这个国家变得更加公平和自由。</p></blockquote><p><em><strong>You’ll need the creativity and ingenuity you develop in all your classes to build new companies that will create new jobs and boost our economy.</strong></em></p><blockquote><p>你们需要在各类课程中逐渐累积和发展出来的创新意识和思维，去创业和建立新的公司与企业，来制造就业机会和推动经济的增长。</p></blockquote><p><em><strong>We need every single one of you to develop your talents and your skills and your intellect so you can help us old folks solve our most difficult problems.</strong></em></p><blockquote><p>我们需要你们中的每一个人都培养和发展自己的天赋、技能和才智，来解决我们所面对的最困难的问题。</p></blockquote><p><em><strong>If you don’t do that – if you quit on school – you’re not just quitting on yourself, you’re quitting on your country.</strong></em></p><blockquote><p>假如你不这么做——假如你放弃学习——那么你不仅是放弃了自己，也是放弃了你的国家。</p></blockquote><p><em><strong>Some of you might not have those advantages. Maybe you don’t have adults in your life who give you the support that you need.</strong></em></p><blockquote><p>你们中有些人可能没有这些有利条件，或许你的生活中没有能为你提供帮助和支持的长辈。</p></blockquote><p><em><strong>But at the end of the day, the circumstances of your life – what you look like, where you come from, how much money you have, what you’ve got going on at home – none of that is an excuse for neglecting your homework or having a bad attitude in school.</strong></em></p><blockquote><p>但归根结底，你的生活状况——你的长相、出身、经济条件、家庭氛围——都不是疏忽学业和态度恶劣的借口。</p></blockquote><p><em><strong><font color=yellow>Where you are right now doesn’t have to determine where you’ll end up.</font></strong></em></p><blockquote><p>你的未来，并不取决于你现在的生活有多好或多坏。</p></blockquote><p><em><strong><font color=yellow>No one’s written your destiny for you, because here in America, you write your own destiny. You make your own future.</font></strong></em></p><blockquote><p>没有人为你编排好你的命运，在美国，你的命运由你自己书写，你的未来由你自己掌握。</p></blockquote><p><em><strong>But they refused to give up. They chose to take responsibility for their lives, for their education, and set goals for themselves. And I expect all of you to do the same.</strong></em></p><blockquote><p>但他们拒绝放弃，他们选择为自己的教育担起责任、给自己定下奋斗的目标。我希望你们中的每一个人，都能做得到这些。</p></blockquote><p><em><strong>That’s why today I’m calling on each of you to set your own goals for your education – and do everything you can to meet them.</strong></em></p><blockquote><p>因此，在今天，我号召你们每一个人都为自己的教育定下一个目标——并在之后，尽自己的一切努力去实现它。</p></blockquote><p><em><strong>But whatever you resolve to do, I want you to commit to it. I want you to really work at it.</strong></em></p><blockquote><p>不管你决定做什么，我都希望你能坚持到底，希望你能真的下定决心。</p></blockquote><p><em><strong><font color=red>These people succeeded because they understood that you can’t let your failures define you – you have to let your failures teach you. You have to let them show you what to do differently the next time.</font></strong></em></p><blockquote><p>他们的成功，源于他们明白人不能让失败左右自己——而是要从中吸取经验。从失败中，你可以明白下一次自己可以做出怎样的改变。</p></blockquote><p><em><strong>So if you get into trouble, that doesn’t mean you’re a troublemaker, it means you need to try harder to act right. If you get a bad grade, that doesn’t mean you’re stupid, it just means you need to spend more time studying.</strong></em></p><blockquote><p>假如你惹了什么麻烦，那并不说明你就是个捣蛋鬼，而是在提醒你，在将来要对自己有更严格的要求；假如你考了个低分，那并不说明你就比别人笨，而是在告诉你，自己得在学习上花更多的时间。</p></blockquote><p><em><strong><font color=yellow>No one’s born being good at all things. You become good at things through hard work.</font></strong></em></p><blockquote><p>没有哪一个人一生出来就擅长做什么事情的，只有努力才能培养出技能。</p></blockquote><p><em><strong>Don’t be afraid to ask questions. Don’t be afraid to ask for help when you need it.</strong></em></p><blockquote><p>不要害怕提问。不要不敢向他人求助。</p></blockquote><p><em><strong>I do that every day. Asking for help isn’t a sign of weakness, it’s a sign of strength because it shows you have the courage to admit when you don’t know something, and that then allows you to learn something new.</strong></em></p><blockquote><p>我每天都在这么做。求助并不是软弱的表现，恰恰相反，它说明你有勇气承认自己的不足、并愿意去学习新的知识。</p></blockquote><p><em><strong>So find an adult that you trust – a parent, a grandparent or teacher, a coach or a counselor – and ask them to help you stay on track to meet your goals.</strong></em></p><blockquote><p>所以，有不懂时，就向大人们求助吧——找个你信得过的对象，例如父母、长辈、老师、教练或辅导员——让他们帮助你向目标前进。</p></blockquote><p><em><strong>And even when you’re struggling, even when you’re discouraged, and you feel like other people have given up on you, don’t ever give up on yourself, because when you give up on yourself, you give up on your country.</strong></em></p><blockquote><p>你要记住，哪怕你表现不好、哪怕你失去信心、哪怕你觉得身边的人都已经放弃了你——永远不要自己放弃自己。因为当你放弃自己的时候，你也放弃了自己的国家。</p></blockquote><p><em><strong>I’m working hard to fix up your classrooms and get you the books and the equipment and the computers you need to learn. But you’ve got to do your part, too.</strong></em></p><blockquote><p>例如我正在努力为你们提供更安全的教室、更多的书籍、更先进的设施与计算机。但你们也要担起自己的责任。</p></blockquote><p><em><strong>So I expect all of you to get serious this year. I expect you to put your best effort into everything you do. I expect great things from each of you. So don’t let us down. Don’t let your family down or your country down. Most of all, don’t let yourself down. Make us all proud.</strong></em></p><blockquote><p>因此我要求你们在今年能够认真起来，我要求你们尽心地去做自己着手的每一件事，我要求你们每一个人都有所成就。请不要让我们失望——不要让你的家人、你的国家和你自己失望。你们要成为我们骄傲，我知道，你们一定可以做到。</p></blockquote><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://zhuanlan.zhihu.com/p/421783204">https://zhuanlan.zhihu.com/p/421783204</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>读《拿工资，三十几岁你也能赚到600万》</title>
    <link href="/2018/11/07/%E6%8B%BF%E5%B7%A5%E8%B5%84/"/>
    <url>/2018/11/07/%E6%8B%BF%E5%B7%A5%E8%B5%84/</url>
    
    <content type="html"><![CDATA[<p><em>结论：</em></p><blockquote><p><strong>1、要理财，先存钱，要存钱，先培养正确的消费观；</strong><br><strong>2、从长期的收益率看，指数基金比主动式管理基金高出80%；</strong><br><strong>3、建立一个全球化多元化的指数基金账户，可以打败90%的职业投资者；</strong><br><strong>4、采用定投，长期持有，才能充分发挥复利效应；</strong><br><strong>5、熊市里买进低价股是最有效的财富累积策略；</strong><br><strong>6、个股选择时，尽量选择业务简单，可预测性强的优质企业；</strong><br><strong>7、优质企业的特点：低负债，高效经营，持续盈利，诚实；</strong></p></blockquote><h2 id="培养正确的消费观"><a href="#培养正确的消费观" class="headerlink" title="培养正确的消费观"></a>培养正确的消费观</h2><p> 1）攒钱买东西，弃用信用卡；<br> 2）投资房产和股票等随着时间增值的资产；</p><h2 id="购买指数基金"><a href="#购买指数基金" class="headerlink" title="购买指数基金"></a>购买指数基金</h2><p>1）主动式管理基金需要支出更多管理费，年费，交易成本，销售佣金和税费等成本；<br>2）由于人的恐惧和贪婪，理财顾问不可能精准把握市场时机，低买高卖；<br>3）主动式管理基金可以为理财顾问带来丰厚的利益，指数基金却不能；</p><h2 id="全球懒人投资公式"><a href="#全球懒人投资公式" class="headerlink" title="全球懒人投资公式"></a>全球懒人投资公式</h2><p>1）全球懒人投资公式：中国股票指数基金（20%）+ 全球股票指数基金（20%）+ 美国股票指数基金（20%）+ 中国债券指数基金（30%）+ 个股（10%）；<br>2）股票指数基金拥有市场上的每一支股票，债券指数基金用于减少风险，个股用于冲刺高收益；<br>3）每年调整一次账户，保持比例不变；<br>4）债券指数基金比例应与年龄相仿；</p><h2 id="复利的神奇力量"><a href="#复利的神奇力量" class="headerlink" title="复利的神奇力量"></a>复利的神奇力量</h2><p><img src="/img/Einstein.png"></p><p>在读这本书之前，我习惯用<strong>线性效应</strong>和<strong>指数效应</strong>这两个词描述我生活的种种。<br>行百里者半九十，说的就是指数效应，后面的十里之所以占据五成那么多，正是因为前面九十里做的铺垫。<br>我们熟知的一万小时理论，似乎可以更好的解释专家的炼成轨迹。<br>我们打小被告知的坚持不懈，更容易形成的初始印象是线性效应。如果我们在做事之前，就清楚坚持是遵循指数效应的，那么，坚持下来的可能性会不会增加很多呢？</p><p>复利正是利用了指数效应。有个公式很好的诠释了指数效应：<br><img src="/img/101.jpg"></p><h2 id="熊市来临大举血拼"><a href="#熊市来临大举血拼" class="headerlink" title="熊市来临大举血拼"></a>熊市来临大举血拼</h2><p>1）股票像被绳子牵住的狗，牵绳的是企业市盈利；<br>2）下跌的股票像打折商品，但抢购时要保持账户的比例分配；</p><h2 id="个股选择"><a href="#个股选择" class="headerlink" title="个股选择"></a>个股选择</h2><p>1）充分了解选购股票的企业，特别是市盈率（个股价格和收益的比例）；<br>2）性感的科技股给投资者带来的回报远远低于传统类别股票；</p><h2 id="识别优质企业"><a href="#识别优质企业" class="headerlink" title="识别优质企业"></a>识别优质企业</h2><p>1）低负债（甚至是零负债）的企业是个股选择的明智之举；<br>2）通过企业的资本收益率了解其经营效率；<br>3）较高的内部人员持股比例，是企业把股东利益放在首位的必要条件；</p><h2 id="延伸资料"><a href="#延伸资料" class="headerlink" title="延伸资料"></a>延伸资料</h2><p>1、美国最大的基金管理公司：<a href="https://investor.vanguard.com/home/">领航投资（Vanguard）</a>、<a href="https://www.vanguardinvestment.com.cn/">中国领航投资</a>；<br>2、其它推荐的基金管理公司：AssetBuilder（德克萨斯州-Dimensional Fund）、RW Investments（马里兰州）、Aperio Group（加利福尼亚）、Evanson Asset Management（加利福尼亚）；<br>3、查看企业的资本收益率：<a href="http://www.valueline.com/">价值线（Value Line）</a>、<a href="http://www.valueline.com.cn/">中国价值线（Value Line of China）</a></p><h2 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h2><blockquote><p>《漫步华尔街》-伯顿·G·马尔基尔<br>《共同基金常识》-约翰·博格</p></blockquote><p>附：<a href="/img/nine.png">《拿工资，三十几岁你也能赚到600万》目录结构摘要</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>漫画阅读器</title>
    <link href="/2018/11/07/%E6%BC%AB%E7%94%BB%E9%98%85%E8%AF%BB%E5%99%A8/"/>
    <url>/2018/11/07/%E6%BC%AB%E7%94%BB%E9%98%85%E8%AF%BB%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<p>主流的漫画阅读方式有两种：页漫（左右翻页）和条漫（上下翻页）；</p><p>从实现上看，“左右翻页”和“上下翻页”对应不同的控件，除此之外，两种阅读方式对应的主体逻辑是一样的；</p><h2 id="漫画阅读器框架图："><a href="#漫画阅读器框架图：" class="headerlink" title="漫画阅读器框架图："></a>漫画阅读器框架图：</h2><p><img src="/img/%E6%BC%AB%E7%94%BB%E9%98%85%E8%AF%BB%E5%99%A8%E6%A1%86%E6%9E%B6%E5%9B%BE.png"></p><p>逻辑层是需要我们实现的主体部分；模块层是逻辑层的细分；类库层可选；</p><p>** 加载逻辑主要职责：从数据容器取图片地址加载显示；**</p><p>** 控制逻辑主要职责：从服务器取图片地址放入数据容器；**</p><p>加载逻辑和控制逻辑通过“数据容器”紧密联系，围绕“数据容器”实现联动；</p><p><img src="/img/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%8F%961.png"></p><h2 id="数据容器"><a href="#数据容器" class="headerlink" title="数据容器"></a>数据容器</h2><p>Android的V7库提供了PagerSnapHelper类，可以实现RecyclerView的仿ViewPager效果；</p><p>所以，RecyclerView可以同时满足页漫和条漫的需求；</p><p>那么，这里的数据容器就对应了RecyclerView的Adapter，添加的数据是图片地址；</p><p>另外，图片地址一般是按章节获取的，所以，数据容器的数据会随着用户滑动不断增加；</p><h2 id="加载逻辑"><a href="#加载逻辑" class="headerlink" title="加载逻辑"></a>加载逻辑</h2><p>当前主流的图片加载库都具备完善的三级缓存自动加载机制，所以加载逻辑做的事情就比较简单；</p><p>但是需要考虑“已下载章节”的特殊情况，“已下载章节”不属于缓存范畴，所以需要手动添加这部分逻辑；</p><h2 id="控制逻辑"><a href="#控制逻辑" class="headerlink" title="控制逻辑"></a>控制逻辑</h2><p>控制逻辑做的事情比较多，按照功能可以划分为三类：</p><p>1、监听当前位置，实时更新章节和页码显示；</p><p>2、发生章节切换，提前从服务器获取图片地址，存入数据容器；</p><p>3、在章节内发生页码切换，根据当前位置和滑动方向，提前加载图片到内存缓存；</p><p><strong>监听当前位置是核心</strong>，因为无论取图片地址，还是预加载图片到内存缓存，都需要判断当前位置；</p><p>最初的设想是通过数据容器Adapter滑动时传入的位置信息，实时监听；</p><p>但实践后发现，RecyclerView未回收的item不会触发getView方法，因此无法做到实时监听；</p><p>最终是重写RecyclerView的onScrollChanged方法，然后回调OnScrollCallbackListener，实现实时监听；</p><h3 id="预加载图片"><a href="#预加载图片" class="headerlink" title="预加载图片"></a>预加载图片</h3><p>预加载图片更准确的表述是：根据当前位置和滑动方向，提前把未解码的图片加工成已解码的图片，加载到内存缓存；</p><p>这么做的目的只有一个：<strong>实现滑动方向上图片的无缝衔接效果</strong>；</p><p>当前主流图片库的三级缓存为未解码缓存、已解码缓存和磁盘缓存；</p><p><img src="/img/fresco-pipeline.png"></p><p>上图为Fresco的三级缓存管理机制，可以看到，<strong>只有已解码的缓存位于UI线程的</strong>，这也是关键所在；</p><p>因为只有位于UI线程，用户才能马上看到；</p><p>位于非UI线程的未解码缓存和磁盘缓存，在展示给用户之前，都需要经过Transform和Decode等一系列耗时操作，因此展示之前会有延迟，表现出闪烁效果；</p><p>另外，从服务器拿到的图片大小不同，格式不一，有的甚至会有加密处理，这些原图一般存放在未解码和磁盘空间；</p><p>而已解码缓存的空间较小，只适合临时存放图片，所以对原图的一系列的Transform和Decode等耗时操作（如调整图片宽高和客户端解密），也只能在展示前临时进行；</p><h3 id="Transform"><a href="#Transform" class="headerlink" title="Transform"></a>Transform</h3><p>一般情况下，服务器存放的图片刚好是客户端想要的，这样可以减少客户端的计算量，为用户提供顺滑体验；</p><p>但是，也有为了数据安全考虑，在服务器端对图片加密的情况，这样的话，客户端拿到图片之后就不得不做解密的耗时操作；</p><p>加密解密算法两端约定好即可，但是客户端资源有限，解密这类耗时操作势必影响到体验，这时应尽量考虑用c或c++实现解密操作；</p><h3 id="漫画阅读器时序图："><a href="#漫画阅读器时序图：" class="headerlink" title="漫画阅读器时序图："></a>漫画阅读器时序图：</h3><p>至此，漫画阅读器的实现要点已基本论述完毕，最后来看一下漫画阅读器的时序图，回顾一下整体流程：</p><p><img src="/img/%E6%BC%AB%E7%94%BB%E9%98%85%E8%AF%BB%E5%99%A8%E6%97%B6%E5%BA%8F%E5%9B%BE1.png"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Android第三方支付弱网用户体验优化</title>
    <link href="/2017/02/17/android%E4%B8%89%E6%96%B9%E6%94%AF%E4%BB%98%E5%BC%B1%E7%BD%91%E4%BD%93%E9%AA%8C%E4%BC%98%E5%8C%96/"/>
    <url>/2017/02/17/android%E4%B8%89%E6%96%B9%E6%94%AF%E4%BB%98%E5%BC%B1%E7%BD%91%E4%BD%93%E9%AA%8C%E4%BC%98%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<p><em><strong>android</strong></em>第三方支付，以<a href="https://doc.open.alipay.com/doc2/detail?treeId=59&articleId=103563&docType=1">支付宝</a>和<a href="https://pay.weixin.qq.com/wiki/doc/api/app/app.php?chapter=8_5">微信支付</a>最具代表性。如果要实现完整的支付流程，请参考官方文档。<br>本文讨论的，是支付最后一公里–<em><strong>弱网下用户体验优化</strong></em>的问题。</p><p>第三方支付流程大体相似，其<strong>简化时序图</strong>如下所示：</p><div align=center><img src="/img/支付流程时序图.jpg" width = 85%></div><p>支付环节，涉及到网络的交互一共有三次，分别对应上图的***<font color=red>请求1</font><em><strong>和</strong></em><font color=red>响应1</font><em><strong>，</strong></em><font color=red>请求2</font><em><strong>和</strong></em><font color=red>响应2</font><em><strong>，</strong></em><font color=red>请求3</font><em><strong>和</strong></em><font color=red>响应3</font>***。</p><ul><li><em><strong><font color=red>请求1</font><em><strong>和</strong></em><font color=red>响应1</font></strong></em>–<strong>商户App</strong>向<strong>商户Server</strong>发起订单生成请求，<strong>商户App</strong>接收<strong>商户Server</strong>生成的订单号；</li><li><em><strong><font color=red>请求2</font><em><strong>和</strong></em><font color=red>响应2</font></strong></em>–<strong>商户App</strong>向<strong>第三方Server</strong>发起支付请求，<strong>商户App</strong>和<strong>商户Server</strong>接收支付结果；</li><li><em><strong><font color=red>请求3</font><em><strong>和</strong></em><font color=red>响应3</font></strong></em>–<strong>商户App</strong>向<strong>商户Server</strong>发起订单结果查询请求，<strong>商户App</strong>接收<strong>商户Server</strong>的订单支付结果；</li></ul><hr><blockquote><p>在弱网下，这三次网络交互都有可能出现<em><strong>久未达</strong></em>或<em><strong>不可达</strong></em>的情况。<br>如果客户端没有相应的处理逻辑，就会造成不好的用户体验。</p></blockquote><p>下面，我们详细分析一下这三次网络交互应该如何处理。</p><p>##请求1 &amp;&amp; 响应1<br>这里需要明确的一点是：一旦用户发起支付请求，就会弹出<strong>加载动效</strong>，而且当请求1久未达或不可达时，<strong>加载动效</strong>会一直存在。<br>所以，从用户体验的角度看，这里应该添加一个***<font size=3 color=red>定时器！</font><em><strong>当定时器超时后，关闭</strong>加载动效</em>*，并切断后续流程。</p><p>***<font size=4 color=red>请求1</font><em><strong>久未达或不可达，包含两种情况：</strong></em><font size=3 color=deepred>定时器超时</font><em><strong>和在超时时间内的</strong></em><font size=3 color=deepred>用户主动取消</font>***。<br><em><strong><font size=4 color=red>响应1</font><em><strong>久未达或不可达，包含两种情况：</strong></em><font size=3 color=deepred>定时器超时</font><em><strong>在超时时间内的</strong></em><font size=3 color=deepred>网络返回失败</font><em><strong>（</strong></em>onErrorResponse</strong></em>）。</p><p>针对***<font size=3 color=deepred>定时器超时</font>***的正确做法是：</p><blockquote><p>关闭<strong>加载动效</strong>，弹出气泡提示（例如“连接超时，请重试”），同时***<font size=4 color=blue>切断请求1</font>***；</p></blockquote><p>示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Runnable</span> <span class="hljs-variable">requestOrderTimeoutRunnable</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 标识是否超时</span><br>        <span class="hljs-keyword">if</span> (!timeoutflag) &#123;<br>            <span class="hljs-comment">// 关闭加载动效</span><br>            anidlg.cancel();<br>            <span class="hljs-comment">// 弹出气泡提示</span><br>            UlabToast.makeText(mContext, mContext.getString(R.string.login_connect_timeout),<br>                    Toast.LENGTH_SHORT).show(<span class="hljs-literal">true</span>, R.drawable.toast_jb);<br>            <span class="hljs-comment">// 切断请求1</span><br>            <span class="hljs-keyword">if</span> (JsonRequestByVolley.currentRequest != <span class="hljs-literal">null</span>) &#123;<br>                JsonRequestByVolley.currentRequest.cancel();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>针对***<font size=3 color=deepred>用户主动取消</font><em><strong>和</strong></em><font size=3 color=deepred>网络返回失败</font><em><strong>（</strong></em>onErrorResponse***）这两种情况的正确做法是：</p><blockquote><p>关闭<strong>加载动效</strong>，弹出气泡提示（例如“订单支付失败”和“连接服务器失败，请重试”），同时***<font size=4 color=blue>切断请求1和定时器</font>***；</p></blockquote><p>示例代码如下：</p><p>***<font size=3 color=deepred>用户主动取消</font>***：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java">anidlg.setOnCancelListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">OnCancelListener</span>()&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-comment">// 关闭加载动效</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCancel</span><span class="hljs-params">(DialogInterface arg0)</span> &#123;<br>        <span class="hljs-comment">// 弹出气泡提示</span><br>        UlabToast.makeText(mContext, mContext.getString(R.string.recharge_order_fail),<br>                Toast.LENGTH_SHORT).show(<span class="hljs-literal">true</span>, R.drawable.toast_jb);<br>        <span class="hljs-comment">// 切断定时器</span><br>        <span class="hljs-keyword">if</span> (timeoutHandler != <span class="hljs-literal">null</span>) &#123;<br>            timeoutHandler.removeCallbacks(requestOrderTimeoutRunnable);<br>        &#125;<br>        <span class="hljs-comment">// 切断请求1</span><br>        <span class="hljs-keyword">if</span> (JsonRequestByVolley.currentRequest != <span class="hljs-literal">null</span>) &#123;<br>            JsonRequestByVolley.currentRequest.cancel();<br>        &#125;<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p><em><strong><font size=3 color=deepred>网络返回失败</font><em><strong>（</strong></em>onErrorResponse</strong></em>）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onErrorResponse</span><span class="hljs-params">(VolleyError error)</span> &#123;<br>    <span class="hljs-comment">// 关闭加载动效</span><br>    anidlg.cancel();<br>    <span class="hljs-comment">// 弹出气泡提示</span><br>    UlabToast.makeText(mContext, mContext.getString(R.string.login_connect_fail),<br>            Toast.LENGTH_SHORT).show(<span class="hljs-literal">true</span>, R.drawable.toast_jb);<br>    <span class="hljs-comment">// 切断定时器</span><br>    <span class="hljs-keyword">if</span> (timeoutHandler != <span class="hljs-literal">null</span>) &#123;<br>        timeoutHandler.removeCallbacks(requestOrderTimeoutRunnable);<br>    &#125;<br>    <span class="hljs-comment">// 切断请求1</span><br>    <span class="hljs-keyword">if</span> (JsonRequestByVolley.currentRequest != <span class="hljs-literal">null</span>) &#123;<br>        JsonRequestByVolley.currentRequest.cancel();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>##请求2 &amp;&amp; 响应2<br>这里需要明确的一点是，一旦***<font size=4 color=red>请求2</font>***发出，用户是无法中途取消的，只能等待跳转到第三方支付平台，或者提示网络超时，如下图所示：</p><div align=center><img src="/img/loading.jpg" width = 55%></div><div align=center><img src="/img/network_issue.jpg" width = 55%></div><p>整个过程<strong>商户App</strong>是无法监测的。所以，在发起***<font size=4 color=red>请求2</font><em><strong>之前，</strong>商户App</em><em>一定要做好自身的检查。<br>例如，存在这么一种情况：当用户主动取消，切断</em><em>*<font size=4 color=red>请求1</font><em><strong>时，</strong>商户App</em>*已经接收到了</em>**<font size=4 color=red>响应1</font>***。</p><p>这就会造成：<strong>加载动效</strong>已经取消，弹出气泡也提示失败，但是第三方支付平台依然会被调起的尴尬情况。<br>所以，正确的做法是：</p><blockquote><p>在发起***<font size=4 color=red>请求2</font><em><strong>之前，检查该次请求是否已经被取消。<br>如果已经取消，则不发起</strong></em><font size=4 color=red>请求2</font><em><strong>，依旧弹出气泡提示失败；<br>如果没有取消，则发起</strong></em><font size=4 color=red>请求2</font>***，不弹出气泡提示；</p></blockquote><p>示例代码如下：</p><p>***<font size=3 color=deepred>第三方支付请求</font>***：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 检查用户是否已取消请求</span><br><span class="hljs-keyword">if</span> (anidlg.isShowing()) &#123;<br><span class="hljs-comment">// 发起请求2</span><br>    aliPay(orderInfo.aliorderinfo.payinfo);<br>    <span class="hljs-comment">// 标识请求2已经发出</span><br>    isPayCalled = <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><em><strong><font size=3 color=deepred>用户主动取消</font><em><strong>：（用</strong></em>isPayCalled</strong></em>标识请求2是否发出，决定是否弹出气泡提示）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java">anidlg.setOnCancelListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">OnCancelListener</span>()&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-comment">// 关闭加载动效</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCancel</span><span class="hljs-params">(DialogInterface arg0)</span> &#123;<br>        <span class="hljs-comment">// 请求2未发出，弹出气泡提示</span><br>        **********************<br>        *<span class="hljs-keyword">if</span> (!isPayCalled) &#123; *<br>        **********************<br>           UlabToast.makeText(mContext, mContext.getString(R.string.recharge_order_fail),<br>                    Toast.LENGTH_SHORT).show(<span class="hljs-literal">true</span>, R.drawable.toast_jb);<br>        &#125;<br>        <span class="hljs-comment">// 切断定时器</span><br>        <span class="hljs-keyword">if</span> (timeoutHandler != <span class="hljs-literal">null</span>) &#123;<br>            timeoutHandler.removeCallbacks(requestOrderTimeoutRunnable);<br>        &#125;<br>        <span class="hljs-comment">// 切断请求1</span><br>        <span class="hljs-keyword">if</span> (JsonRequestByVolley.currentRequest != <span class="hljs-literal">null</span>) &#123;<br>            JsonRequestByVolley.currentRequest.cancel();<br>        &#125;<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>值得注意的是，<em><strong>isPayCalled</strong></em>需要在***<font size=3 color=deepred>网络返回失败</font><em><strong>（onErrorResponse）和</strong></em><font size=3 color=deepred>定时器超时</font><em><strong>的代码里设置为</strong></em>true<em><strong>，因为这两种情况已经有了气泡提示，不应在</strong></em><font size=3 color=deepred>用户主动取消</font>***的代码里重复提示。</p><p><strong>*<font size=4 color=red>响应2</font><em><strong>久未达或不可达，造成最直接的影响是：</strong>商户App</em>*一直处于</strong>加载动效**的状态，无法完成接下来的流程。<br><em><strong><font size=3 color=deepred>用户主动取消</font><em><strong>时，由于</strong></em><font size=4 color=red>请求2</font><em><strong>已经调起，</strong></em>isPayCalled&#x3D;true</strong></em>，所以也不会有弹出气泡提示。</p><p>此时的推荐做法是：</p><blockquote><p>在返回<em><strong>Activity</strong></em>的<strong>*onResume()<em><strong>中，检查第三方支付的回调函数是否执行；<br>如果未执行，则关闭</strong>加载动效</em>*，弹出气泡提示（例如“订单状态未可知，请联系客服”），并</strong>*<font size=4 color=blue>切断请求3</font>***；<br>如果已执行，则不做处理；</p></blockquote><p>示例代码如下：（正常情况下，先执行第三方支付回调函数，后执行<em><strong>onResume</strong></em>，***<font size=4 color=red>响应2</font><em><strong>久未达或不可达时，则会先执行</strong></em>onResume***）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-meta">@Override</span><br> <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onResume</span><span class="hljs-params">()</span> &#123;<br> <span class="hljs-comment">// 检查是否执行了支付回调函数</span><br> <span class="hljs-keyword">if</span> (!isExecuted) &#123;<br>    <span class="hljs-keyword">if</span> (anidlg != <span class="hljs-literal">null</span> &amp;&amp; anidlg.isShowing()) &#123;<br>        <span class="hljs-comment">// 关闭加载动效</span><br>            anidlg.cancel();<br>        &#125;<br>        <span class="hljs-comment">// 弹出气泡提示</span><br>        UlabToast.makeText(mContext, mContext.getString(R.string.login_connect_fail),<br>                Toast.LENGTH_SHORT).show(<span class="hljs-literal">true</span>, R.drawable.toast_jb);<br>        <span class="hljs-comment">// 用于在第三方支付回调函数里判断，是否切断请求3</span><br>        isExecuted = <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-built_in">super</span>.onResume();<br>&#125;<br></code></pre></td></tr></table></figure><p><em><strong><font size=3 color=deepred>用户主动取消</font><em><strong>：（用</strong></em>isExecuted</strong></em>标识第三方支付是否执行了回调函数）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java">anidlg.setOnCancelListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">OnCancelListener</span>()&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-comment">// 关闭加载动效</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCancel</span><span class="hljs-params">(DialogInterface arg0)</span> &#123;<br>        <span class="hljs-comment">// 标识第三方支付是否执行了回调函数</span><br>        **********************<br>        *<span class="hljs-keyword">if</span> (!isExecute) &#123;   *<br>        **********************<br>        <span class="hljs-comment">// 请求2未发出，弹出气泡提示</span><br>            <span class="hljs-keyword">if</span> (!isPayCalled) &#123;<br>               UlabToast.makeText(mContext, mContext.getString(R.string.recharge_order_fail),<br>                        Toast.LENGTH_SHORT).show(<span class="hljs-literal">true</span>, R.drawable.toast_jb);<br>            &#125;<br>            <span class="hljs-comment">// 切断定时器</span><br>            <span class="hljs-keyword">if</span> (timeoutHandler != <span class="hljs-literal">null</span>) &#123;<br>                timeoutHandler.removeCallbacks(requestOrderTimeoutRunnable);<br>            &#125;<br>            <span class="hljs-comment">// 切断请求1</span><br>            <span class="hljs-keyword">if</span> (JsonRequestByVolley.currentRequest != <span class="hljs-literal">null</span>) &#123;<br>                JsonRequestByVolley.currentRequest.cancel();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>***<font size=3 color=deepred>第三方支付回调</font>***：（以支付宝为例）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleMessage</span><span class="hljs-params">(Message msg)</span> &#123;<br>    <span class="hljs-keyword">switch</span> (msg.what) &#123;<br>    <span class="hljs-keyword">case</span> SDK_PAY_FLAG: &#123;<br>    <span class="hljs-keyword">if</span> (!isExecute) &#123;<br>        isExecute = <span class="hljs-literal">true</span>;<br>            <br>            <span class="hljs-type">PayResult</span> <span class="hljs-variable">payResult</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PayResult</span>((String) msg.obj);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">resultStatus</span> <span class="hljs-operator">=</span> payResult.getResultStatus();<br>            <span class="hljs-comment">// 订单支付失败，以同步返回消息为准，弹出气泡提示，即时响应</span><br>            <span class="hljs-keyword">if</span> (!resultStatus.equals(<span class="hljs-string">&quot;9000&quot;</span>)) &#123;<br>                 UlabToast.makeText(mContext, mContext.getString(R.string.recharge_order_fail),<br>                        Toast.LENGTH_SHORT).show(<span class="hljs-literal">true</span>, R.drawable.toast_jb);<br>            &#125;<br>            <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">// 订单支付成功，以商户Server的异步返回消息为准</span><br>                <span class="hljs-type">CyclicBarrier</span> <span class="hljs-variable">cb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CyclicBarrier</span>(<span class="hljs-number">1</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>()&#123;<br>                    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                        <span class="hljs-keyword">if</span> (MyApplication.PAY_SUCCESS == orderResult.result) &#123;<br>                        <span class="hljs-comment">// 弹出气泡提示</span><br> UlabToast.makeText(mContext, mContext.getString(R.string.recharge_order_success),<br>                        Toast.LENGTH_SHORT).show(<span class="hljs-literal">true</span>, R.drawable.toast_jb);<br>                            <span class="hljs-comment">// 展示支付结果</span><br>                            runProcessByResult();<br>                        &#125;<br>                    &#125;<br>                &#125;);<br>                <span class="hljs-comment">// 向服务器请求支付结果,获取当前订单状态</span><br>                getRechargeResult(cb, orderInfo.orderid, rechargeway);<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// 响应2久未达，切断请求3</span><br>        <span class="hljs-keyword">else</span> &#123;<br>        &#125;<br>        anidlg.cancel();<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-keyword">default</span>:<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>##请求3 &amp;&amp; 响应3<br><strong>*<font size=4 color=red>请求3</font><em><strong>和</strong></em><font size=4 color=red>响应3</font><em><strong>，与</strong></em><font size=4 color=red>请求1</font><em><strong>和</strong></em><font size=4 color=red>响应1</font><em><strong>类似，都是</strong>商户App</em>*和</strong>商户Server**之间的交互，采用同样的处理方式。这里不再赘述。</p><p>##其它优化点1<br>默认的气泡提示最短时间是***<font size=4 color=red>2s</font>***，如果用户操作较快，会发生如下情况：</p><blockquote><p>发出新的请求时，仍旧显示上一次请求的气泡提示；</p></blockquote><p>如果气泡提示涉及到网络，特别是弱网，上一次请求的气泡可能隔了很久才会出现，给用户造成歧义。<br>正确的做法是：</p><blockquote><p>将支付流程的所有气泡统一成一个变量，当发起新的支付请求时，隐藏之前的气泡提示。</p></blockquote><p>示例代码如下：</p><p>***<font size=3 color=deepred>统一气泡提示</font>***：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> UlabToast uToast;<br>……<br>uToast = UlabToast.makeText(mContext, mContext.getString(R.string.recharge_order_fail), Toast.LENGTH_SHORT);<br>uToast.show(<span class="hljs-literal">true</span>, R.drawable.toast_jb);<br>……<br></code></pre></td></tr></table></figure><p>***<font size=3 color=deepred>隐藏气泡提示</font>***：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hideAllToasts</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">if</span> (uToast != <span class="hljs-literal">null</span>) &#123;<br>        uToast.hide();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>##其它优化点2<br>定时器的超时时间不应设置太短，否则在弱网下会造成订单失败率很高的情况。经验值是***<font size=4 color=red>8s</font>***左右。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Android 6.0 新系统权限</title>
    <link href="/2017/01/12/android6.0%E6%96%B0%E6%9D%83%E9%99%90%E5%A4%84%E7%90%86/"/>
    <url>/2017/01/12/android6.0%E6%96%B0%E6%9D%83%E9%99%90%E5%A4%84%E7%90%86/</url>
    
    <content type="html"><![CDATA[<p>前段时间运营部同事的手机出现了<em><strong>新漫画打开即闪退</strong></em>的问题，由于她的手机是android6.0，而新漫画工程的<em><strong>API级别为22（android5.0）</strong></em>，所以我们首先想到升级<em><strong>API级别到23（android6.0）</strong></em>，然并卵。分析日志后发现，是我们用的Mob短信SDK没有**++<font size=5>读写短信的系统权限</font>++**所致。原来android6.0推出了新系统权限，也就是所谓的运行时权限。</p><blockquote><p>android6.0推出了动态权限管理，目的是方便用户更加容易地控制自己的隐私。程序员不能再像之前那样，通过在xml文件写入就能方便地获取所有需要的权限，而需要动态申请，用户授权。</p></blockquote><h2 id="android6-0的权限是如何划分的？"><a href="#android6-0的权限是如何划分的？" class="headerlink" title="android6.0的权限是如何划分的？"></a>android6.0的权限是如何划分的？</h2><p>android6.0将系统权限分为<em><strong>正常权限</strong></em>和<em><strong>危险权限</strong></em>：</p><ul><li><p>** 正常权限不涉及用户隐私; **</p></li><li><p>** 危险权限涉及用户隐私信息的数据和资源；**</p></li></ul><hr><p><em><strong>正常权限</strong></em>的处理（如下左图所示）和android6.0（***<font size=5 color=red>API级别23</font>***）之前的权限处理一样，主要有两个特点：</p><ul><li><p><strong>安装即得；</strong></p></li><li><p><strong>用户不能取消已授予的权限；</strong></p></li></ul><p><em><strong>危险权限</strong></em></font>的处理（如下右图所示）也有两个特点：</p><ul><li><p><strong>需要在运行时一个一个询问用户是否授权；</strong></p></li><li><p><strong>用户可以取消已授予的权限；</strong></p><div align=center><img src="/img/runtimepermission.jpg" width = 85%></div></li></ul><p>Google官方的dangerous权限及分组：<a href="https://developer.android.com/guide/topics/security/permissions.html?hl=zh-cn#normal-dangerous">permissions: normal-dangerous</a></p><h2 id="危险权限的处理分为哪几种情况呢？"><a href="#危险权限的处理分为哪几种情况呢？" class="headerlink" title="危险权限的处理分为哪几种情况呢？"></a>危险权限的处理分为哪几种情况呢？</h2><p>根据我们App++<strong>指定的API级别</strong>++，以及运行++<strong>设备的API级别</strong>++，可以分为四种情况:</p><ul><li><p><em><strong>targetSDKVersion &lt; 23</strong></em> &amp;&amp; ***android操作系统 &lt; 6.0 ***: 安装时默认获得权限，且用户无法在安装App之后取消权限；</p></li><li><p><em><strong>targetSDKVersion &gt;&#x3D;23</strong></em> &amp;&amp; ***android操作系统 &lt; 6.0 *** : 安装时默认获得权限，且用户无法在安装App之后取消权限；</p></li><li><p><em><strong>targetSDKVersion &lt; 23*** &amp;&amp; ***android操作系统 &gt;&#x3D; 6.0</strong></em> : 安装时默认获得权限，但是用户可以在安装App之后动态取消授权（**<font color=deepred>取消时手机会弹出提醒，告诉用户这个是为旧版手机打造的应用，让用户谨慎操作，如下图所示**</font>）；</p></li><li><p><font color=red><em><strong>targetSDKVersion &gt;&#x3D; 23</strong></em> &amp;&amp; <em><strong>android操作系统 &gt;&#x3D; 6.0</font></strong></em> : 安装时不会获得权限，需要在运行时向用户申请权限，用户授权后仍然可以在设置页面中取消授权，如上右图所示；</p><div align=center><img src="/img/app-permission.png" width = 55%></div></li></ul><h2 id="如果我们不设定targetSDKVersion到23会怎么样？"><a href="#如果我们不设定targetSDKVersion到23会怎么样？" class="headerlink" title="如果我们不设定targetSDKVersion到23会怎么样？"></a>如果我们不设定targetSDKVersion到23会怎么样？</h2><p>很显然，如果不设定***<del>targetSDKVersion到23</del>***，短期内还可以不写权限适配的代码。</p><p>但是！！！前面提到了，用户仍然可以在6.0的手机上++<strong>取消安装时默认赋予的危险权限</strong>++。</p><p><strong><font size=5 color=red>那么这时候会发生什么？？？？</font><strong>如果这个API原本应该返回的是对象，那么这时将返回</strong>null</strong>；如果这个API原本应该返回的是数字，这时就是<strong>0</strong>。**<font color=blue>可想而知，如果你只是对返回的null或者0做了一些不恰当的处理，App还是可能会crash的。</font>**所以这不是长久之计，尽快地处理好权限申请才是王道，这也是一种对App、对用户更负责的做法。</p><p>##那么，什么样的处理逻辑是合理的呢？ ##</p><p>Google官网的推荐做法是：</p><ul><li><p>只申请必要的权限；</p></li><li><p>解释为何需要权限；</p></li><li><p>用时再申请；</p></li></ul><p>Google官网推荐的权限最佳做法：<a href="https://developer.android.com/training/permissions/best-practices.html?hl=zh-cn#testing">Permissions Best Practices</a></p><p>根据官网的推荐做法，建议采用以下处理流程：</p><div align=center><img src="/img/mainprocess.png" width = 85%></div><p>如果用户点击&#x3D;&#x3D;“不再提示”&#x3D;&#x3D;，则系统授权弹窗将不会弹出。流程变为:</p><div align=center><img src="/img/mainprocess2.png" width = 85%></div><h2 id="新漫画涉及到哪些权限需要处理呢？"><a href="#新漫画涉及到哪些权限需要处理呢？" class="headerlink" title="新漫画涉及到哪些权限需要处理呢？"></a>新漫画涉及到哪些权限需要处理呢？</h2><p>Google官网列出的危险权限列表如下：</p><div align=center><img src="/img/permgroup.png" width = 85%></div><p>结合新漫画App，我们需要处理的危险权限分别是<em><strong>CAMERA、SMS和STORAGE</strong></em>。</p><p><em><strong>CAMERA</strong></em> : 在++<em><strong>用户上传自定义头像</strong></em>++时申请权限；</p><p><em><strong>SMS</strong></em> : 在++<em><strong>用户登陆（发送验证码）</strong></em>++时申请权限；</p><p><em><strong>STORAGE</strong></em> : 在++<em><strong>用户设置下载路径为外置存储卡，或者需要下载作品到外置存储卡</strong></em>++时申请权限；</p><h2 id="如何测试我们的流程是否正确呢？"><a href="#如何测试我们的流程是否正确呢？" class="headerlink" title="如何测试我们的流程是否正确呢？"></a>如何测试我们的流程是否正确呢？</h2><p>**<font color=red>使用授予或撤销权限的各种组合进行测试</font>**。</p><p>例如，相机应用可能会在清单中列出 <em><strong>CAMERA、READ_CONTACTS</strong></em> 和<em><strong>ACCESS_FINE_LOCATION</strong></em>。在测试应用时应逐一打开和关闭这些权限，确保应用可以妥善处理所有权限配置。</p><p>请记住，自Android6.0起，用户可以打开或关闭任何应用的权限，即使面向API级别22或更低级别的应用也是如此。</p><p>##后记##<br>看来谷歌也在一点一点收紧对于android生态的管理，据说Android7.0进一步规范了系统通知栏的样式。个人认为这是好事，android生态圈由于过度的私人订制，出现了野蛮生长的局面，最明显的例子–<em><strong>android手机越用越卡顿</strong></em>。其罪魁祸首，就是各种第三方消息推送服务使用后台保活“黑科技”，过度占用系统资源所致。有机会我们再来分析一下其内部的实现机制吧。</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
